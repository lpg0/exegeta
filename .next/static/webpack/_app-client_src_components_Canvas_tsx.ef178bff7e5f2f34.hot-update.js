"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-client_src_components_Canvas_tsx",{

/***/ "(app-client)/./src/components/nodes/TextNode.tsx":
/*!*******************************************!*\
  !*** ./src/components/nodes/TextNode.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-client)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-client)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(app-client)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var react_konva__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-konva */ \"(app-client)/./node_modules/react-konva/es/ReactKonva.js\");\n\nvar _s = $RefreshSig$();\n\n\n\nconst TextNode = (param)=>{\n    let { node , onSelect , onDragEnd , onTextChange  } = param;\n    _s();\n    const [isEditing, setIsEditing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [editText, setEditText] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(node.text);\n    const textRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const textAreaRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const clickTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mountedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(true);\n    const [portalContainer, setPortalContainer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Track component mount state and set up portal container\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        mountedRef.current = true;\n        // Ensure we have access to document.body\n        if (typeof document !== \"undefined\") {\n            setPortalContainer(document.body);\n        }\n        return ()=>{\n            mountedRef.current = false;\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"TextNode \".concat(node.id, \": isEditing changed to\"), isEditing);\n        if (isEditing && mountedRef.current) {\n            // Use a longer timeout to ensure the textarea is fully rendered\n            const timeoutId = setTimeout(()=>{\n                if (!mountedRef.current) return;\n                console.log(\"TextNode \".concat(node.id, \": Attempting to focus textarea\"));\n                if (textAreaRef.current && typeof textAreaRef.current.focus === \"function\") {\n                    textAreaRef.current.focus();\n                    textAreaRef.current.select();\n                    console.log(\"TextNode \".concat(node.id, \": Textarea focused successfully\"));\n                } else {\n                    console.log(\"TextNode \".concat(node.id, \": Textarea ref not available or focus not a function\"));\n                }\n            }, 100);\n            return ()=>clearTimeout(timeoutId);\n        }\n    }, [\n        isEditing,\n        node.id\n    ]);\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        console.log(\"TextNode \".concat(node.id, \": Single click detected, isEditing:\"), isEditing);\n        if (isEditing || !mountedRef.current) return;\n        // Clear any existing timeout\n        if (clickTimeoutRef.current) {\n            clearTimeout(clickTimeoutRef.current);\n            clickTimeoutRef.current = null;\n        }\n        // Set a timeout for single click action\n        clickTimeoutRef.current = setTimeout(()=>{\n            if (!mountedRef.current) return;\n            console.log(\"TextNode \".concat(node.id, \": Processing single click\"));\n            onSelect === null || onSelect === void 0 ? void 0 : onSelect(node.id);\n        }, 200);\n    }, [\n        node.id,\n        isEditing,\n        onSelect\n    ]);\n    const handleDragEnd = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e)=>{\n        console.log(\"TextNode \".concat(node.id, \": Drag end detected\"));\n        if (isEditing || !mountedRef.current) return;\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(node.id, e.target.x(), e.target.y());\n    }, [\n        node.id,\n        isEditing,\n        onDragEnd\n    ]);\n    const handleDoubleClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        console.log(\"TextNode \".concat(node.id, \": Double click detected, starting edit mode\"));\n        if (!mountedRef.current) {\n            console.log(\"TextNode \".concat(node.id, \": Component not mounted, skipping edit mode\"));\n            return;\n        }\n        // Clear single click timeout\n        if (clickTimeoutRef.current) {\n            clearTimeout(clickTimeoutRef.current);\n            clickTimeoutRef.current = null;\n        }\n        try {\n            setEditText(node.text); // Initialize with current text\n            setIsEditing(true);\n            // Temporarily disable dragging on the Konva.Text node itself\n            if (textRef.current) {\n                textRef.current.draggable(false);\n            }\n        } catch (error) {\n            console.error(\"TextNode \".concat(node.id, \": Error setting edit mode:\"), error);\n        }\n    }, [\n        node.id,\n        node.text\n    ]);\n    const handleTextChange = (e)=>{\n        if (!mountedRef.current) return;\n        setEditText(e.target.value);\n    };\n    const commitTextChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!mountedRef.current) return;\n        console.log(\"Committing text change:\", editText);\n        if (onTextChange && editText !== node.text) {\n            onTextChange(node.id, editText);\n        }\n        setIsEditing(false);\n        if (textRef.current) {\n            textRef.current.draggable(true); // Re-enable dragging\n        }\n    }, [\n        editText,\n        node.text,\n        node.id,\n        onTextChange\n    ]);\n    const handleBlur = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!mountedRef.current) return;\n        // Add a small delay to prevent immediate blur when textarea is created\n        setTimeout(()=>{\n            if (isEditing && mountedRef.current) {\n                commitTextChange();\n            }\n        }, 100);\n    }, [\n        isEditing,\n        commitTextChange\n    ]);\n    const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e)=>{\n        if (!mountedRef.current) return;\n        e.stopPropagation(); // Prevent event bubbling\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault(); // Prevent newline\n            commitTextChange();\n        }\n        if (e.key === \"Escape\") {\n            setEditText(node.text); // Revert to original text\n            setIsEditing(false);\n            if (textRef.current) {\n                textRef.current.draggable(true);\n            }\n        }\n    }, [\n        commitTextChange,\n        node.text\n    ]);\n    const getTextAreaStyle = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const textNode = textRef.current;\n        if (!textNode) {\n            console.log(\"TextNode \".concat(node.id, \": No text node ref available for positioning\"));\n            return {\n                display: \"none\"\n            };\n        }\n        const stage = textNode.getStage();\n        const container = stage === null || stage === void 0 ? void 0 : stage.container();\n        if (!stage || !container) {\n            console.log(\"TextNode \".concat(node.id, \": No stage or container available for positioning\"));\n            return {\n                display: \"none\"\n            };\n        }\n        // Get the bounding rect of the canvas container\n        const containerRect = container.getBoundingClientRect();\n        // Get the absolute position of the text node\n        const absPos = textNode.getAbsolutePosition();\n        const scale = stage.scaleX();\n        // Calculate the actual position relative to the page\n        const x = containerRect.left + absPos.x * scale;\n        const y = containerRect.top + absPos.y * scale;\n        const width = (node.width || textNode.width() || 100) * scale;\n        const height = (node.height || textNode.height() || 20) * scale;\n        console.log(\"TextNode \".concat(node.id, \": Positioning textarea at\"), {\n            x,\n            y,\n            width,\n            height\n        });\n        return {\n            position: \"fixed\",\n            left: \"\".concat(x, \"px\"),\n            top: \"\".concat(y, \"px\"),\n            width: \"\".concat(width, \"px\"),\n            height: \"\".concat(height, \"px\"),\n            fontSize: \"\".concat((node.fontSize || 16) * scale, \"px\"),\n            fontFamily: node.fontFamily || \"Arial\",\n            color: node.fill || \"#000000\",\n            border: \"2px solid #007bff\",\n            padding: \"2px\",\n            margin: \"0px\",\n            overflow: \"hidden\",\n            background: \"white\",\n            outline: \"none\",\n            resize: \"none\",\n            lineHeight: \"1.2\",\n            zIndex: 1000,\n            whiteSpace: \"pre-wrap\",\n            wordBreak: \"break-word\",\n            boxSizing: \"border-box\"\n        };\n    }, [\n        node\n    ]);\n    // Render the editing overlay using a portal (outside the Konva canvas)\n    const renderEditingOverlay = ()=>{\n        if (!isEditing || !portalContainer || !mountedRef.current) return null;\n        console.log(\"TextNode \".concat(node.id, \": Rendering editing overlay via portal\"));\n        try {\n            return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n                ref: textAreaRef,\n                value: editText,\n                onChange: handleTextChange,\n                onBlur: handleBlur,\n                onKeyDown: handleKeyDown,\n                style: getTextAreaStyle(),\n                autoFocus: false,\n                placeholder: \"Editing...\"\n            }, void 0, false, {\n                fileName: \"/Users/lukegiraudeau/dev/exegeta/src/components/nodes/TextNode.tsx\",\n                lineNumber: 212,\n                columnNumber: 9\n            }, undefined), portalContainer);\n        } catch (error) {\n            console.error(\"TextNode \".concat(node.id, \": Error creating portal:\"), error);\n            return null;\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_konva__WEBPACK_IMPORTED_MODULE_3__.Text, {\n                ref: textRef,\n                id: node.id,\n                x: node.x,\n                y: node.y,\n                text: node.text,\n                fontSize: node.fontSize || 16,\n                fontFamily: node.fontFamily || \"Arial\",\n                fill: node.fill || \"#000000\",\n                width: node.width,\n                height: node.height,\n                draggable: !isEditing,\n                opacity: isEditing ? 0.3 : 1,\n                onClick: handleClick,\n                onTap: handleClick,\n                onDblClick: handleDoubleClick,\n                onDragEnd: handleDragEnd,\n                stroke: node.selected ? \"#007bff\" : undefined,\n                strokeWidth: node.selected ? 2 : 0,\n                listening: !isEditing\n            }, void 0, false, {\n                fileName: \"/Users/lukegiraudeau/dev/exegeta/src/components/nodes/TextNode.tsx\",\n                lineNumber: 232,\n                columnNumber: 7\n            }, undefined),\n            renderEditingOverlay()\n        ]\n    }, void 0, true);\n};\n_s(TextNode, \"tLa1gU4iAmaU7h/1WTFWaPKJCoc=\");\n_c = TextNode;\n/* harmony default export */ __webpack_exports__[\"default\"] = (TextNode);\nvar _c;\n$RefreshReg$(_c, \"TextNode\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./src/components/nodes/TextNode.tsx\n"));

/***/ })

});